# coding: utf-8

"""
    BlueAPI Control

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr


class PlanModel(BaseModel):
    """
    Representation of a plan  # noqa: E501
    """

    description: Optional[StrictStr] = Field(
        default=None, description="Docstring of the plan"
    )
    name: StrictStr = Field(default=..., description="Name of the plan")
    var_schema: Optional[Dict[str, Any]] = Field(
        default=None, alias="schema", description="Schema of the plan's parameters"
    )
    __properties = ["description", "name", "schema"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanModel:
        """Create an instance of PlanModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanModel:
        """Create an instance of PlanModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanModel.parse_obj(obj)

        _obj = PlanModel.parse_obj(
            {
                "description": obj.get("description"),
                "name": obj.get("name"),
                "var_schema": obj.get("schema"),
            }
        )
        return _obj
