# coding: utf-8

"""
    BlueAPI Control

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class TrackableTask(BaseModel):
    """
    A representation of a task that the worker recognizes  # noqa: E501
    """

    errors: Optional[conlist(StrictStr)] = None
    is_complete: Optional[StrictBool] = False
    is_pending: Optional[StrictBool] = True
    task: Optional[Any] = None
    task_id: StrictStr = Field(...)
    __properties = ["errors", "is_complete", "is_pending", "task", "task_id"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackableTask:
        """Create an instance of TrackableTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if task (nullable) is None
        # and __fields_set__ contains the field
        if self.task is None and "task" in self.__fields_set__:
            _dict["task"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackableTask:
        """Create an instance of TrackableTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackableTask.parse_obj(obj)

        _obj = TrackableTask.parse_obj(
            {
                "errors": obj.get("errors"),
                "is_complete": (
                    obj.get("is_complete")
                    if obj.get("is_complete") is not None
                    else False
                ),
                "is_pending": (
                    obj.get("is_pending") if obj.get("is_pending") is not None else True
                ),
                "task": obj.get("task"),
                "task_id": obj.get("task_id"),
            }
        )
        return _obj
