asyncapi: "2.6.0"
id: https://github.com/DiamondLightSource/blueapi
info:
  title: Bluesky Worker Service
  version: <main>
  description: Service for controlling access to and running scans based on Bluesky Plans and Ophyd Devices
  contact:
    name: Callum Forrester
    email: callum.forrester@diamond.ac.uk
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
defaultContentType: application/json
channels:
  public.worker.event:
    description: Produces events about the state of the worker
    subscribe:
      operationId: stateEvent
      summary: Updates on the state of the worker
      description: Events describing the state of the worker and any tasks it's running. Includes error and warning information.
      message:
        $ref: "#/components/messages/workerStateEvent"
  public.worker.event.progress:
    description: Produces events about the progress of runs associated with a plan
    subscribe:
      operationId: progressEvent
      summary: Updates on the progress of tasks
      description: Events describing the progress of processes within a running task,such as moving motors and exposing detectors.
      message:
        $ref: "#/components/messages/workerProgressEvent"
  public.worker.event.data:
    description: Produces events supplying data produced by runs associated with a plan
    subscribe:
      operationId: dataEvent
      summary: Events representing collection of data
      description: Data documents produced by running plans
      message:
        oneOf:
          - $ref: "#/components/messages/taggedStartDocument"
          - $ref: "#/components/messages/taggedDescriptorDocument"
          - $ref: "#/components/messages/taggedEventDocument"
          - $ref: "#/components/messages/taggedStopDocument"
          - $ref: "#/components/messages/taggedResourceDocument"
          - $ref: "#/components/messages/taggedDatumDocument"
          - $ref: "#/components/messages/taggedResourceStream"
          - $ref: "#/components/messages/taggedDatumStream"
          - $ref: "#/components/messages/taggedEventPage"
          - $ref: "#/components/messages/taggedDatumPage"
  worker.run:
    description: Accepts and provides responses to requests to run a plan using the supplied parameters
    publish:
      operationId: runPlanRequest
      summary: Submit a 'Run Plan' task with parameters
      description: Consume a request to run a scan based on the specified Plan with the supplied parameters
      message:
        $ref: "#/components/messages/runPlan"
    subscribe:
      operationId: runPlanResponse
      summary: Indicate acceptance of a 'Run Plan' task - N.B. returned on a temporary channel
      description: >-
        Provides acknowledgement of a Run Plan requests. Infact this response will be sent on a temporary channel 
        specified by replyDestination in the header of the corresponding runPlanRequest but is documented here as 
        the name of the channel will not be known until runtime.
      message:
        $ref: "#/components/messages/taskResponse"
  worker.plans:
    description: >-
      Accepts requests to return the names of all the Bluesky Plans known to the service. At the moment 
      any message on this channe will produce this response.
    publish:
      operationId: plansRequest
      summary: Get list of Plan names
      description: Request a list of Plan names known to the system
      message:
        $ref: "#/components/messages/anyJson"
    subscribe:
      operationId: plansResponse
      summary: The list of plan names - N.B. returned on a temporary channel
      description: >-
        A List of the names of plans known to the system. This response will be sent on a temporary 
        channel specified by replyDestination in the header of the corresponding runPlanRequest but is 
        documented here as the name of the channel will not be known until runtime.
      message:
        $ref: "#/components/messages/plansResponse"
  worker.devices:
    description: >-
      Accepts requests to return the names of all the Ophyd Devices known to the service. At the moment 
      any message on this channel will produce this response.
    publish:
      operationId: devicesRequest
      summary: Get list of Device names
      description: Request a list of Device names known to the system
      message:
        $ref: "#/components/messages/anyJson"
    subscribe:
      operationId: devicesResponse
      summary: The list of device names - N.B. returned on a temporary channel
      description: >-
        A List of the names of devices known to the system. This response will be sent on a temporary 
        channel specified by replyDestination in the header of the corresponding devicesRequest but is 
        documented here as the name of the channel will not be known until runtime.
      message:
        $ref: "#/components/messages/devicesResponse"
components:
  messages: # Defined as Components to allow referencing from other APIs. # TODO: Define protocol specific correlationId bindings
    taggedStartDocument:
      messageId: runStart
      summary: Indicates the start of a Bluesky run based on a previously specified Plan; describes the initial position/metadata of a scan and its involved devices
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/run_start.json"
    taggedStopDocument:
      messageId: runStop
      summary: Indicates the completion of a Bluesky run based on a previously specified Plan; describes end conditions and metadata
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/run_stop.json"
    taggedDescriptorDocument:
      messageId: eventStreamDescriptor
      summary: Describes the devices to be within a scientifically related stream of measurements
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/event_descriptor.json"
    taggedEventDocument:
      messageId: dataEvent
      summary: Describes a point measurement for a number of scientifically related devices
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/event.json"
    taggedEventPage:
      messageId: eventPage
      deprecated: true
      summary: Page style collection of events
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/event_page.json"
    taggedResourceDocument:
      messageId: resource
      summary: Describes an external resource (file, database entry etc.) that is to be referenced by later datum
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/resource.json"
    taggedDatumDocument:
      messageId: datum
      summary: Describes how to access a point measurement within an external resource
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/datum.json"
    taggedDatumPage:
      messageId: datumPage
      deprecated: true
      summary: Page style collection of datum
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/datum_page.json"
    taggedResourceStream:
      messageId: streamResource
      summary: Describes an external resource (file, database entry etc.) that is to be referenced by later Stream Datum
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/stream_resource.json"
    taggedDatumStream:
      messageId: streamDatum
      summary: Describes how to access a slice of an external resource
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          name:
            type: string
          doc:
            $ref: "https://raw.githubusercontent.com/bluesky/event-model/master/event_model/schemas/stream_datum.json"
    runPlan:
      messageId: RunPlan
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        required:
          - name
          - params
        properties:
          name:
            description: Name of plan to run
            type: string
          params:
            description: Values for parameters to plan, if any (Map of name to any)
            type: object
            additionalProperties:
              type: object
    taskResponse:
      messageId: runPlanResponse
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          taskName:
            description: Unique identifier for the task
            type: string
        additionalProperties: false
    plansResponse:
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          plans:
            description: Plans available to use by a worker
            type: array
            items:
              type: string
        additionalProperties: false
    devicesResponse:
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        properties:
          devices:
            description: Devices available to use in plans
            type: array
            items:
              type: string
        additionalProperties: false
    workerStateEvent:
      messageId: stateEvent
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        required:
          - state
          - errors
          - warnings
        properties:
          state:
            $ref: "#/components/schemas/workerState"
          taskStatus:
            $ref: "#/components/schemas/taskStatus"
          errors:
            description: A list of any errors generated during the execution of a task
            type: array
            items:
              type: string
          warnings:
            description: A list of any warnings generated during the execution of a task
            type: array
            items:
              type: string
    workerProgressEvent:
      messageId: progressEvent
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        type: object
        required:
          - taskName
          - statuses
        properties:
          taskName:
            description: Unique id of the task, returned when it was originally submitted
            type: string
          statuses:
            type: object
            description: Status object providing various indicators for the task
            additionalProperties:
              $ref: "#/components/schemas/statusView"
    anyJson:
      headers:
        $ref: "#/components/schemas/contextHeaders"
      payload:
        title: AnyJSON
        type: string
        format: json
  schemas:
    contextHeaders:
      type: object
      required:
        - destination
      properties:
        destination:
          description: Name of the channel on which the message is being sent
          type: string
        replyDestination:
          description: Name of the temporary queue, specified by the caller where they will listen for response messages to requests submitted on the worker.X channels
          type: string
        correlationId:
          description: Unique identifier of an exchange supplied by its originator
          type: string
    workerState:
      description: The state of the Worker.
      enum:
        - IDLE
        - RUNNING
        - PAUSING
        - PAUSED
        - HALTING
        - STOPPING
        - ABORTING
        - SUSPENDING
        - PANICKED
        - UNKNOWN
    taskStatus:
      description: Current state of a task the worker is running.
      type: object
      required:
        - taskName
        - taskComplete
        - taskFailed
      properties:
        taskName:
          description: Unique id of the task, returned when it was originally submitted
          type: string
        taskComplete:
          description: Indication whether the task reaced the end of its execution
          type: boolean
        taskFailed:
          description: Indication whether the expected task outcome was achieved
          type: boolean
    statusView:
      type: object
      required:
        - displayName
        - unit
        - precision
        - done
      properties:
        displayName:
          description: Human-readable name indicating what this status describes
          type: string
        current:
          description: Current value of operation progress, if known
          type: number
          format: float
        initial:
          description: Initial value of operation progress, if known
          type: number
          format: float
        target:
          description: Target value of operation progress, if known
          type: number
          format: float
        unit:
          description: Units of progress
          type: string
          default: Units
        precision:
          description: Sensible precision of progress to display
          type: integer
          default: 3
        done:
          description: Whether the operation this status describes is complete
          type: boolean
          default: false
        percentage:
          description: Percentage of status completion, if known
          type: number
          format: float
        timeElapsed:
          description: Time elapsed since status operation beginning, if known
          type: number
          format: float
        timeRemaining:
          description: Estimated time remaining until operation completion, if known
          type: number
          format: float
