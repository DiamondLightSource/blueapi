# Default values for blueapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/diamondlightsource/blueapi
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# Recommended for production to change service.type to ClusterIP and set up an Ingress
service:
  type: ClusterIP
  port: 80

ingress:
  create: false
#  host: foo.diamond.ac.uk  (assumes port = service.port)

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

initResources: {}
# Can optionally specify separate resource constraints for the scratch setup container.
# If left empty this defaults to the same as resources above.

nodeSelector: {}

tolerations: []

affinity: {}

hostNetwork: false # May be needed for talking to arcane protocols such as EPICS

restartOnConfigChange: true

listener:
  enabled: true
  resources: {}

# Additional envVars to mount to the pod as a String
extraEnvVars: []
# - name: RABBITMQ_PASSWORD
#   valueFrom:
#     secretKeyRef:
#       name: rabbitmq-password
#       key: rabbitmq-password

# Config for the worker goes here, will be mounted into a config file
worker:
  api:
    host: 0.0.0.0 # Allow non-loopback traffic
    port: 8000
  env:
    sources:
    - kind: deviceFunctions
      module: blueapi.startup
    - kind: planFunctions
      module: blueapi.startup
  stomp:
    auth:
      username: guest
      password: guest
    host: rabbitmq
    port: 61613

initContainer:
  scratch:
    root: /blueapi-plugins/scratch
    repositories: []
    # - name: "dodal"
    #   remote_url: https://github.com/DiamondLightSource/dodal.git

# Mount path for scratch area from host machine, setting
# this effectively enables scratch area management
scratchHostPath: "" # example: /usr/local/blueapi-software-scratch
