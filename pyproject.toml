[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "blueapi"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
description = "Lightweight bluesky-as-a-service wrapper application. Also usable as a library."
dependencies = [
    "tiled[client]",
    "bluesky[plotting]>=1.14.0",                     # plotting includes matplotlib, required for BestEffortCallback in run plans
    "ophyd-async",
    "aioca",
    "pydantic>=2.0",
    "scanspec>=0.9.0",
    "pydantic-settings",
    "stomp-py",
    "PyYAML>=6.0.2",
    "click>=8.2.0",
    "fastapi>=0.112.0",
    "uvicorn",
    "requests",
    "dls-dodal>=1.60.0",
    "super-state-machine",                           # https://github.com/DiamondLightSource/blueapi/issues/553
    "GitPython",
    "event-model==1.23.1",                           # https://github.com/DiamondLightSource/blueapi/issues/684
    "bluesky-stomp>=0.2.0",
    "opentelemetry-distro>=0.48b0",
    "opentelemetry-instrumentation-fastapi>=0.48b0",
    "observability-utils>=0.1.4",
    "pyjwt[crypto]",
    "tomlkit",
    "graypy>=2.1.0",
]
dynamic = ["version"]
license.file = "LICENSE"
readme = "README.md"
requires-python = ">=3.11"

[dependency-groups]
dev = [
    "copier",
    "myst-parser",
    "pipdeptree",
    "pre-commit",
    "pydata-sphinx-theme>=0.15.4",
    "pytest",
    "pyright",
    "pytest-cov",
    "pytest-asyncio",
    "responses",
    "ruff",
    "semver",
    "sphinx-autobuild>=2024.4.16",
    "sphinx-copybutton",
    "sphinx-click",
    "sphinx-design",
    "sphinxcontrib-openapi",
    "tox-uv",
    "types-mock",
    "types-PyYAML",
    "types-requests",
    "types-urllib3",
    "mock",
    "jwcrypto",
    "deepdiff",
]

[project.scripts]
blueapi = "blueapi.cli:main"

[project.urls]
GitHub = "https://github.com/DiamondLightSource/blueapi"

[[project.authors]] # Further authors may be added by duplicating this section
email = "callum.forrester@diamond.ac.uk"
name = "Callum Forrester"

[tool.setuptools_scm]
version_file = "src/blueapi/_version.py"

[tool.pyright]
typeCheckingMode = "standard"
reportMissingImports = false  # Ignore missing stubs in imported modules

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst"
    --ignore=src/blueapi/startup
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = ["error", "ignore::DeprecationWarning"]
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "docs src tests/unit_tests"
asyncio_mode = "auto"

[tool.coverage.run]
patch = ["subprocess"]
data_file = "/tmp/blueapi.coverage"
omit = ["src/blueapi/startup/**/*"]

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

[tool.tox]
skipsdist = true
# envs to runs automatically with tox -p
env_list = ["pre-commit", "type-checking", "tests", "system-test", "docs"]

[tool.tox.env_run_base]
# Pass all environment variables to the test environments
passenv = ["*"]

[tool.tox.env.pre-commit]
description = "Run pre-commit on all files"
commands = [
    [
        "pre-commit",
        "run",
        "--all-files",
        "--show-diff-on-failure",
        { replace = "posargs", default = [], extend = true },
    ],
]

[tool.tox.env.type-checking]
description = "Run pyright"
commands = [
    [
        "pyright",
        "--pythonpath",
        ".venv/bin/python",
        "src",
        "tests",
        { replace = "posargs", default = [], extend = true },
    ],
]

[tool.tox.env.tests]
description = "Run tests with coverage"
commands = [
    [
        "pytest",
        "--cov=blueapi",
        "--cov-report",
        "term",
        "--cov-report",
        "xml:cov.xml",
        { replace = "posargs", default = [], extend = true },
    ],
]

[tool.tox.env.system-test]
description = "Run systems tests"
commands = [
    [
        "pytest",
        "tests/system_tests",
        { replace = "posargs", default = [], extend = true}
    ]
]
[tool.tox.env.docs]
description = "Run docs build with clean environment"
commands = [
    [
        "sphinx-build",
        "--fresh-env",
        "--show-traceback",
        "--fail-on-warning",
        "--keep-going",
        "docs",
        "build/html",
        { replace = "posargs", default = [], extend = true },
    ],
]

[tool.tox.env.docs-autobuild]
description = "Run docs with autobuild on change"
commands = [
    [
        "sphinx-autobuild",
        "--show-traceback",
        "--watch",
        "README.md",
        "docs",
        "build/html",
        { replace = "posargs", default = [], extend = true },
    ],
]

[tool.ruff]
src = ["src", "tests"]
line-length = 88
lint.select = [
    "B",    # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",   # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "E",    # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",    # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "W",    # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",    # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP",   # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "SLF",  # self - https://docs.astral.sh/ruff/settings/#lintflake8-self
    "FAST", # fastapi - https://docs.astral.sh/ruff/rules/#fastapi-fast
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Body",
    "fastapi.Task",
    "dodal.common.inject",
]

[tool.ruff.lint.per-file-ignores]
# By default, private member access is allowed in tests
# See https://github.com/DiamondLightSource/python-copier-template/issues/154
# Remove this line to forbid private member access in tests
"tests/**/*" = ["SLF001"]
