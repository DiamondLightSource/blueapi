# Default values for blueapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/diamondlightsource/blueapi
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.13.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# Recommended for production to change service.type to ClusterIP and set up an Ingress
service:
  type: ClusterIP
  port: 80

ingress:
  create: false
  # host: ckk43848.diamond.ac.uk

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

initResources: {}
# Can optionally specify separate resource constraints for the scratch setup container.
# If left empty this defaults to the same as resources above.

nodeSelector: {}

tolerations: []

affinity: {}

hostNetwork: false # May be needed for talking to arcane protocols such as EPICS

restartOnConfigChange: true

listener:
  enabled: true
  resources: {}

# Additional envVars to mount to the pod as a String
extraEnvVars: []
# - name: RABBITMQ_PASSWORD
#   valueFrom:
#     secretKeyRef:
#       name: rabbitmq-password
#       key: rabbitmq-password

tracing:
  otlp:
    enabled: false
    protocol: http/protobuf
    server:
      host: https://daq-services-jaeger # replace with central instance
      port: 4318

# Config for the worker goes here, will be mounted into a config file
worker:
  api:
    host: 0.0.0.0 # Allow non-loopback traffic
    port: 8000
  env:
    sources:
      - kind: deviceFunctions
        module: blueapi.startup.example_devices
      - kind: planFunctions
        module: blueapi.startup.example_plans
      - kind: planFunctions
        module: dodal.plans
      - kind: planFunctions
        module: dodal.plan_stubs.wrapped
  stomp:
    enabled: false
    auth:
      username: guest
      password: guest
    host: rabbitmq
    port: 61613
  scratch:
    root: /blueapi-plugins/scratch
    repositories: []
    # - name: "dodal"
    #   remote_url: https://github.com/DiamondLightSource/dodal.git
  logging:
    level: "INFO"
    graylog:
      enabled: False
      host: "graylog-log-target.diamond.ac.uk"
      port: 12232
  oidc:
    well_known_url: https://authn.diamond.ac.uk/realms/master/.well-known/openid-configuration
    client_id: blueapi
initContainer:
  enabled: false

# oauth2-proxy:
#   ingress:
#     enabled: true
#     hosts:
#       - p46-blueapi.diamond.ac.uk
#     path: /
#     pathType: Prefix
#   config:
#     cookieSecret: zcYIH1xIRiJuqU5d9x4t3VHWvxRVyxjxlC86orJLwqk=
#     configFile: |-
#         email_domains = ["*"]
        
#   alphaConfig:
#     enabled: true
#     configData:
#       upstreamConfig:
#         proxyRawPath: true
#         upstreams:
#           - id: blueapi
#             path: /
#             uri: http://blueapi:8000
#       providers:
#         - id: authn.diamond.ac.uk
#           clientID: blueapi
#           code_challenge_method: S256
#           clientSecret: "wdasdjsakdhsakjhdskjahdkjsh"
#           provider: oidc
#           # scope: "blueapi"
#           oidcConfig:
#             insecureAllowUnverifiedEmail: true
#             audienceClaims: ["aud"]
#             # emailClaim: email
#             # userIDClaim: fedid
#             issuerURL: https://authn.diamond.ac.uk/realms/master
#       injectRequestHeaders:  # Forward headers into pod
#         - name: Authorization
#           values:
#             - claim: access_token
#               prefix: "Bearer "
#         - name: x-forwarded-user
#           values:
#             - claim: user
#         - name: x-auth-request-user
#           values:
#             - claim: user
#       injectResponseHeaders:
#         - name: Identity
#           values:
#             - claim: id_token
# oauth2-proxy:
#   ingress:
#     enabled: true
#     hosts:
#       - p46-blueapi.diamond.ac.uk
#     path: /
#     pathType: Prefix
#   config:
#     clientID: blueapi
#     cookieSecret: zcYIH1xIRiJuqU5d9x4t3VHWvxRVyxjxlC86orJLwqk=
#     configFile: |-
#         email_domains = ["*"]
#         silence_ping_logging=true
#   alphaConfig:
#     enabled: true
#     configData:
#       upstreamConfig:
#         proxyRawPath: true
#         upstreams:
#           - id: blueapi
#             path: /
#             uri: http://blueapi.p46-beamline:80
#       providers:
#         - id: authn.diamond.ac.uk
#           clientID: blueapi
#           code_challenge_method: S256
#           clientSecret: "wdasdjsakdhsakjhdskjahdkjsh"
#           provider: oidc
#           # scope: "blueapi"
#           oidcConfig:
#             insecureAllowUnverifiedEmail: true
#             audienceClaims: ["aud"]
#             emailClaim: email
#             # userIDClaim: fedid
#             issuerURL: https://authn.diamond.ac.uk/realms/master
#       injectRequestHeaders:  # Forward headers into pod
#         - name: Authorization
#           values:
#             - claim: access_token
#               prefix: "Bearer "
#         - name: x-forwarded-user
#           values:
#             - claim: user
#         - name: x-auth-request-user
#           values:
#             - claim: user
#       injectResponseHeaders:
#         - name: Identity
#           values:
#             - claim: id_token

# 3rd attempt at oauth2-proxy
oauth2:
  # extraEnv:
  #   - name: OIDC_CLIENT_SECRET
  #     valueFrom:
  #       secretKeyRef:
  #         name: tiled-secrets
  #         key: OIDC_CLIENT_SECRET

  ingress:
    enabled: true
    hosts:
      - p46-blueapi.diamond.ac.uk
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    path: /
    pathType: Prefix
  config:
    configFile: |-
      email_domains = [ "*" ]
      skip_provider_button = true
  alphaConfig:
    enabled: true
    configData:
      upstreamConfig:
        proxyRawPath: true
        upstreams:
          - id: blueapi
            path: /
            uri: http://blueapi.p46-beamline:80
      providers:
        - id: authn.diamond.ac.uk
          clientID: blueapi
          clientSecret: "wdasdjsakdhsakjhdskjahdkjsh"
          provider: oidc
          scope: "openid profile email fedid read:metadata read:data"
          oidcConfig:
            insecureAllowUnverifiedEmail: true
            audienceClaims: ["aud"]
            emailClaim: email
            userIDClaim: fedid
            issuerURL: https://authn.diamond.ac.uk/realms/master
      injectRequestHeaders:  # Forward headers into pod
        - name: Authorization
          values:
            - claim: access_token
              prefix: "Bearer "
        - name: x-forwarded-user
          values:
            - claim: user
        - name: x-auth-request-user
          values:
            - claim: user
      injectResponseHeaders:
        - name: Identity
          values:
            - claim: id_token
